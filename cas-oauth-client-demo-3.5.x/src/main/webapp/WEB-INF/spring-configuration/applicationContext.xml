<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    <description>
        This is the main Spring configuration file with some of the main "core" classes defined. You shouldn't really
        modify this unless you
        know what you're doing!
    </description>

    <bean id="facebook1" class="org.scribe.up.provider.impl.FacebookProvider">
        <property name="key" value="153186971478756" />
        <property name="secret" value="4e72f0233e6b4594e49ca5eaa59660a4" />
        <property name="scope" value="email,user_likes,user_about_me,user_birthday,user_education_history,user_hometown,user_relationship_details,user_location,user_religion_politics,user_relationships,user_work_history,user_website,user_photos,user_events" />
        <!-- cas-server-support 3.5.1 / scribe-up 1.1.0 : property name="friendsReturned" value="true" />
        <property name="moviesReturned" value="true" />
        <property name="musicReturned" value="true" />
        <property name="booksReturned" value="true" />
        <property name="likesReturned" value="true" />
        <property name="albumsReturned" value="true" />
        <property name="eventsReturned" value="true" /-->
        <!-- cas-server-support 3.5.2 / scribe-up 1.2.0 : -->
        <property name="fields" value="id,name,first_name,middle_name,last_name,gender,locale,languages,link,username,third_party_id,timezone,updated_time,verified,bio,birthday,education,email,hometown,interested_in,location,political,favorite_athletes,favorite_teams,quotes,relationship_status,religion,significant_other,website,work,friends,movies,music,books,likes,albums,events" />        
    </bean>

    <bean id="twitter1" class="org.scribe.up.provider.impl.TwitterProvider">
        <property name="key" value="OPEWaSoTuAe49K4dSoRvNw" />
        <property name="secret" value="aKmvleltXAmLKcnlMgzRjTsCnhV3QVMVDh153xJttCo" />
    </bean>

    <bean id="yahoo1" class="org.scribe.up.provider.impl.YahooProvider">
        <property name="key" value="dj0yJmk9MzhNZWFkeXQxN09GJmQ9WVdrOVRrbzNVVVJMTkdrbWNHbzlNVGc0TURNek5EVTJNZy0tJnM9Y29uc3VtZXJzZWNyZXQmeD1lNw--" />
        <property name="secret" value="2f3146ac90d60b9f79125b1167437b6c64657a0b" />
    </bean>

    <bean id="github1" class="org.scribe.up.provider.impl.GitHubProvider">
        <property name="key" value="bb7977b9e7f892c115c3" />
        <property name="secret" value="15a6f06329945e1ac5b6f715dcae5314bf88b005" />
    </bean>

    <bean id="caswrapper1" class="org.jasig.cas.support.oauth.provider.impl.CasWrapperProvider20">
        <property name="key" value="this_is_the_key" />
        <property name="secret" value="this_is_the_secret" />
        <property name="serverUrl" value="http://localhost:8080/cas2/oauth2.0" />
    </bean>

    <bean id="wordpress1" class="org.scribe.up.provider.impl.WordPressProvider">
        <property name="key" value="251" />
        <property name="secret" value="6QCZZBhbokJ2YWfbK2F9vBgvGthtKijwaMRP8x57NWjPW2CXFsJJukt2RWvhlKaQ" />
    </bean>

    <bean id="oauthConfig" class="org.jasig.cas.support.oauth.OAuthConfiguration">
        <property name="loginUrl" value="http://localhost:8080/cas/login" />
        <property name="providers">
            <list>
                <ref bean="facebook1" />
                <ref bean="twitter1" />
                <ref bean="yahoo1" />
                <ref bean="github1" />
                <ref bean="caswrapper1" />
                <ref bean="wordpress1" />
            </list>
        </property>
    </bean>

    <!--
      Including this aspectj-autoproxy element will cause spring to automatically
      create proxies around any beans defined in this file that match the pointcuts
      of any aspects defined in this file.
    -->
    <aop:aspectj-autoproxy/>

    <!--
      Declare the TimingAspect that we want to weave into the other beans
      defined in this config file.
    -->
    <bean id="timingAspect" class="org.perf4j.log4j.aop.TimingAspect"/>


    <!-- Message source for this context, loaded from localized "messages_xx" files -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
          p:basename="messages"/>

    <bean
            id="servicesManager"
            class="org.jasig.cas.services.DefaultServicesManagerImpl">
        <constructor-arg index="0" ref="serviceRegistryDao"/>
    </bean>

    <!--
        Job to periodically reload services from service registry.
        This job is needed for a clustered CAS environment since service changes
        in one CAS node are not known to the other until a reload.
    -->
    <bean id="serviceRegistryReloaderJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
          p:targetObject-ref="servicesManager"
          p:targetMethod="reload"/>

    <bean id="periodicServiceRegistryReloaderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"
          p:jobDetail-ref="serviceRegistryReloaderJobDetail"
          p:startDelay="${service.registry.quartz.reloader.startDelay:120000}"
          p:repeatInterval="${service.registry.quartz.reloader.repeatInterval:120000}"/>

    <bean id="httpClient" class="org.jasig.cas.util.HttpClient"
          p:readTimeout="5000"
          p:connectionTimeout="5000"/>

    <bean id="noRedirectHttpClient" class="org.jasig.cas.util.HttpClient" parent="httpClient"
          p:followRedirects="false" />

    <bean id="persistentIdGenerator"
          class="org.jasig.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator"
          p:salt="casrocks"/>

    <!-- CentralAuthenticationService -->
    <bean id="centralAuthenticationService" class="org.jasig.cas.CentralAuthenticationServiceImpl"
          p:ticketGrantingTicketExpirationPolicy-ref="grantingTicketExpirationPolicy"
          p:serviceTicketExpirationPolicy-ref="serviceTicketExpirationPolicy"
          p:authenticationManager-ref="authenticationManager"
          p:ticketGrantingTicketUniqueTicketIdGenerator-ref="ticketGrantingTicketUniqueIdGenerator"
          p:ticketRegistry-ref="ticketRegistry"
          p:servicesManager-ref="servicesManager"
          p:persistentIdGenerator-ref="persistentIdGenerator"
          p:uniqueTicketIdGeneratorsForService-ref="uniqueIdGeneratorsMap"/>

    <bean id="proxy10Handler" class="org.jasig.cas.ticket.proxy.support.Cas10ProxyHandler"/>

    <bean id="proxy20Handler" class="org.jasig.cas.ticket.proxy.support.Cas20ProxyHandler"
          p:httpClient-ref="httpClient"
          p:uniqueTicketIdGenerator-ref="proxy20TicketUniqueIdGenerator"/>

    <!-- ADVISORS -->
    <bean id="advisorAutoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <bean id="validationAnnotationBeanPostProcessor" class="org.jasig.cas.util.CustomBeanValidationPostProcessor"
            p:afterInitialization="true" />

    <!-- The scheduler bean wires up any triggers that define scheduled tasks -->
    <bean id="scheduler" class="org.jasig.cas.util.AutowiringSchedulerFactoryBean"/>
    
    <!-- Spring-Json View provides a JsonExceptionResolver exceptions thrown during a controller action -->
    <bean id="jsonExceptionResolver" class="org.springframework.web.servlet.view.json.exception.JsonExceptionResolver">
        <property name="exceptionView" value="jsonView" />
        <property name="errorHandler">
	        <list>
	        	<bean class="org.springframework.web.servlet.view.json.error.HttpStatusError" p:errorCode="412"/>
	            <bean class="org.springframework.web.servlet.view.json.error.ModelFlagError"/>
	        </list>
        </property>
        <property name="exceptionHandler">
	        <list>
	        	<bean class="org.springframework.web.servlet.view.json.exception.ExceptionMessageExceptionHandler" />
	            <bean class="org.springframework.web.servlet.view.json.exception.StackTraceExceptionHandler" />
	        </list>
        </property>
    </bean>
        
</beans>